{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    quantity: 0,\n    total: 0\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      const {\n        id,\n        name,\n        price,\n        quantity\n      } = action.payload;\n\n      // Check if the product already exists in the cart\n      const existingProductIndex = state.products.findIndex(product => product.id === id);\n      if (existingProductIndex !== -1) {\n        // If the product already exists, update its quantity\n        state.products[existingProductIndex].quantity += quantity;\n      } else {\n        // If the product is new, add it to the cart\n        state.products.push({\n          id,\n          name,\n          price,\n          quantity\n        });\n      }\n\n      // Update total quantity and price\n      state.quantity += quantity;\n      state.total += price * quantity;\n    }\n  }\n});\nexport const {\n  addProduct\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","products","quantity","total","reducers","addProduct","state","action","id","price","payload","existingProductIndex","findIndex","product","push","actions","reducer"],"sources":["F:/Store project/client/src/redux/cartRedux.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    products: [],\r\n    quantity: 0,\r\n    total: 0,\r\n  },\r\n  reducers: {\r\n    addProduct: (state, action) => {\r\n      const { id, name, price, quantity } = action.payload;\r\n\r\n      // Check if the product already exists in the cart\r\n      const existingProductIndex = state.products.findIndex(\r\n        (product) => product.id === id\r\n      );\r\n\r\n      if (existingProductIndex !== -1) {\r\n        // If the product already exists, update its quantity\r\n        state.products[existingProductIndex].quantity += quantity;\r\n      } else {\r\n        // If the product is new, add it to the cart\r\n        state.products.push({ id, name, price, quantity });\r\n      }\r\n\r\n      // Update total quantity and price\r\n      state.quantity += quantity;\r\n      state.total += price * quantity;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addProduct } = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEC,EAAE;QAAET,IAAI;QAAEU,KAAK;QAAEP;MAAS,CAAC,GAAGK,MAAM,CAACG,OAAO;;MAEpD;MACA,MAAMC,oBAAoB,GAAGL,KAAK,CAACL,QAAQ,CAACW,SAAS,CAClDC,OAAO,IAAKA,OAAO,CAACL,EAAE,KAAKA,EAC9B,CAAC;MAED,IAAIG,oBAAoB,KAAK,CAAC,CAAC,EAAE;QAC/B;QACAL,KAAK,CAACL,QAAQ,CAACU,oBAAoB,CAAC,CAACT,QAAQ,IAAIA,QAAQ;MAC3D,CAAC,MAAM;QACL;QACAI,KAAK,CAACL,QAAQ,CAACa,IAAI,CAAC;UAAEN,EAAE;UAAET,IAAI;UAAEU,KAAK;UAAEP;QAAS,CAAC,CAAC;MACpD;;MAEA;MACAI,KAAK,CAACJ,QAAQ,IAAIA,QAAQ;MAC1BI,KAAK,CAACH,KAAK,IAAIM,KAAK,GAAGP,QAAQ;IACjC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG;AAAW,CAAC,GAAGP,SAAS,CAACiB,OAAO;AAC/C,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}